@page "/logueo"
@using GestorControlRemoto.Shared.DTOs
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProv
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Authorization

<section class="contact d-flex justify-content-center align-items-center vh-100">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 " data-aos="fade-up" data-aos-delay="100">
                <form class="php-email-form mt-4">
                    <div class="row">
                        <div class="col-md-12 form-group mt-3 mt-md-0">
                            <input type="text" class="form-control" name="email" placeholder="Usuario" required @bind-value=usuario.NombreCuenta>
                        </div>
                        <div class="col-md-12 form-group mt-3 mt-md-0">
                            <input type="text" class="form-control" name="email" placeholder="Clave" required @bind-value=usuario.Password>
                        </div>
                    </div>

                    <div class="my-3">
                        <div class="loading">Loading</div>
                        <div class="error-message"></div>
                        <div class="sent-message">Your message has been sent. Thank you!</div>
                    </div>
                    <div class="text-center"><button type="button" @onclick=Login style="background:#009970;border:0; padding:10px 30px; transition: 0.4s; border-radius:50px; color:white;">Login</button></div>
                </form>
            </div>
        </div>

    </div>
</section>

<button class="btn btn-primary" @onclick="logout">Cerrar</button>



@code {
    UsuarioDTO usuario = new UsuarioDTO();
    string token = "";

    private async Task Login()
    {
        var respuesta = await Http.PostAsJsonAsync("api/Usuario/Login", usuario);

        if (respuesta.IsSuccessStatusCode)
        {
            token = await respuesta.Content.ReadAsStringAsync();
            await GuardarSesion();
            Console.WriteLine(token);
            resetearFormulario();
            Nav.NavigateTo("/");
        }
    }

    private async Task GuardarSesion()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
        await ObtenerUsuario();
        await AuthStateProv.GetAuthenticationStateAsync(); // cambia el estado de la autenticacion
    }

    private async Task ObtenerUsuario()
    {
        token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
        Console.WriteLine(token);
    }

    async Task logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token");
        await AuthStateProv.GetAuthenticationStateAsync();
    }

    // Retira el token del localStorage y cambia es estado de AuthStateProv estado de la autenticacion

    private void resetearFormulario()
    {
        usuario.NombreCuenta = string.Empty;
        usuario.Password = string.Empty;
    }
}